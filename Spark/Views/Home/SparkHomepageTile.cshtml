@model Spark.Models.SparkTileModel


<div class="SparkTile" id="HomePageSpark@(Model.PK)">
    @*!!!This link is transparent and covers most of the div so that we can link and still up / down vote.!!!*@
    <a href="@Url.Action("SparkContainer", "Spark", new { nSparkID = @Model.PK })" class="Overlay"></a>
    <h1>@Model.Title</h1>
    <div class="DividerSmall"></div>
    <p>@Model.Topic</p>
    <div class="SparkTileBottomControls">
        <img id="UpvoteIcon@(Model.PK)" class="UpvoteIcon" src="http://i62.tinypic.com/2yx0v47.png"
             onclick="ImageClicked(@(Model.PK), true), CastSparkVote(@Model.PK, true)"
             onmouseover="ChangeImage(@Model.PK, true, 'over')"
             onmouseout="ChangeImage(@Model.PK, true, 'out')">
        <img id="DownvoteIcon@(Model.PK)" class="DownvoteIcon" src="http://i59.tinypic.com/igj4aa.png"
             onclick="ImageClicked(@(Model.PK), false), CastSparkVote(@Model.PK, false)"
             onmouseover="ChangeImage(@Model.PK, false, 'over')"
             onmouseout="ChangeImage(@Model.PK, false, 'out')">
        <p id="VoteCount@(Model.PK)" class="VoteCount">(+@Model.UpvoteCount.ToString()/ -@Model.DownvoteCount.ToString())</p>
        <img class="Tag1" src="@(Model.Tag1)">
        <img class="Tag2" src="@(Model.Tag2)">
        <img class="Tag3" src="@(Model.Tag3)">
    </div>
    <div class="hidden" id="HiddenSparkDownvote@(Model.PK)">@Model.DownvoteCount.ToString()</div>
    <div class="hidden" id="HiddenSparkUpvote@(Model.PK)">@Model.UpvoteCount.ToString()</div>
</div>
