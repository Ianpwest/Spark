@model Spark.Models.SparkCreateModel
@Styles.Render("~/Content/SparkCreate.css")
<script type="text/javascript">
    window.onload = function () {
        document.getElementById("SubjectMatterId").selectedIndex = -1;
    }
</script>

<div class="pageCreateSpark">

    <p class="title" hidden="hidden">Spark Create</p>

    @using (Html.BeginForm("SparkCreate", "Spark", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(true)

        <fieldset>
            <legend>sparks</legend>

            <div id="TransitionElementVert0" class="divMainFirst">
                <div class="divSubjectMatterImage">
                    <img id="imgPreview" class="imgPreviewSubjectMatter" alt=""
                         src="~/content/blankimage.gif" />
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.SubjectMatterId)
                </div>
                <div>
                    @Html.DropDownListFor(model => model.SubjectMatterId, Model.SubjectMattersAll, new { onchange = "getImage(this)", @class ="sparkFields"})
                    <p>&nbsp;&lt;--- Select a Spark type.</p>
                    @Html.ValidationMessageFor(model => model.SubjectMatterId)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Topic)
                </div>
                <div>
                    @Html.EditorFor(model => model.Topic, new { @class ="sparkFields" })
                    <p>&nbsp;&lt;--- Write a main topic for your spark.</p>
                    @Html.ValidationMessageFor(model => model.Topic)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Description)
                </div>
                <div>
                    @Html.TextAreaFor(model => model.Description, 5, 60, new object { })
                    <p>&nbsp;&lt;--- Write a brief summary of your spark.</p>
                    @Html.ValidationMessageFor(model => model.Description)
                </div>

                <div class="editor-field">
                    <label>Tags</label>
                </div>
                <div class="divTagTablesMain">

                    <table id="tableAvailableTags" class="tableAvailableTags">
                        <thead>
                            <tr class="trHeaderAvailableTagsTable">
                                <td class="tdHeaderAvailableTagsLeft">@Html.TextBox("Header", null, new { @style = "width:100%; height:15px;", onkeyup = "filterResults(this.value)" })</td>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (Model.TagIdAndNames != null)
                                {
                                    foreach (KeyValuePair<int, string> kvp in Model.TagIdAndNames)
                                    {
                                        <tr>
                                            <td class="nonClickedCells" onclick="selectTag(this)" id=@String.Concat("availableTag" + kvp.Key)>
                                                @kvp.Value
                                            </td>
                                            <td class="nonClickedCells" onclick=" selectTag(this)"><img class="imgAvailableTagIcons" src="@Model.TagIdAndImages[kvp.Key]" /></td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                    <table id="tableSelectedTags" class="tableSelectedTags">
                        <thead>
                            <tr><td><p>Selected Tags</p></td></tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>

                <div id="divHiddenTags" style="visibility:hidden">0</div>

                @Html.HiddenFor(model => model.Tag1)
                @Html.HiddenFor(model => model.Tag2)
                @Html.HiddenFor(model => model.Tag3)
                @Html.HiddenFor(model => model.Tag4)
                @Html.HiddenFor(model => model.Tag5)

                <p style="position:relative">
                    <input type="button" value="Next" onclick="SingleTransitionVert(true)" />
                </p>
            </div>

            <div id="TransitionElementVert1" style=" width:100%; position:absolute; opacity:0; top:500px; visibility:hidden;">
                <p class="classSubmitButtons">Would you like to create an argument for either side?</p>
                @Html.HiddenFor(model => model.ArgEntryType)
                <div>
                    <input class="classSubmitButtons" type="submit" value="Agree and Create" onclick="setArgumentType(1)"/>
                    <input class="classSubmitButtons" type="submit" value="Disagree and Create" onclick="setArgumentType(2)" />
                </div>
                <div id="divCreateBack">
                    <input class="classSubmitButtons" type="button" value="Back" onclick="SingleTransitionVert(false)" />
                    <input class="classSubmitButtons" type="submit" value="Just Create" onclick="setArgumentType(0)" />
                </div>
            </div>

        </fieldset>
    }
    <div id="divArgumentContainer" style="opacity: 0; position: absolute; width: 100%;">

    </div>

</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
