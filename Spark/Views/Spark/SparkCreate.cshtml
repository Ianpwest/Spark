@model Spark.Models.SparkCreateModel
@Styles.Render("~/Content/SparkCreate.css")
@Scripts.Render("~/bundles/jqueryval")

<div class="pageCreateSpark">

    <p class="title" hidden="hidden">Spark Create</p>

    @using (Html.BeginForm("SparkCreate", "Spark", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(true)

        <fieldset>
            <legend>sparks</legend>

            <div @*id="TransitionElementVert0"*@ class="divMainFirst">
                @*<div class="divSubjectMatterImage">
                    <img id="imgPreview" class="imgPreviewSubjectMatter" alt=""
                         src="~/content/blankimage.gif" />
                </div>*@

                <div id="OuterDiv" style="position:relative; width:1000px; height:800px; margin:0 auto;">
                    <div class="FirstDiv" style="position:absolute; width: 500px; height:400px;">
                        <div class="inputText">
                            @Html.LabelFor(model => model.Title)
                        </div>

                        <div>
                            @Html.TextBoxFor(model => model.Title, new {@id="inputTitle", @class = "sparkFields" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Title)

                        <div class="inputText">
                            @Html.LabelFor(model => model.SubjectMatterId)
                        </div>
                        <div>
                            @Html.DropDownListFor(model => model.SubjectMatterId, Model.SubjectMattersAll, new { @id="inputCategory", @class = "select"})
                        </div>
                        @Html.ValidationMessageFor(model => model.SubjectMatterId)

                        <div class="inputText">
                            @Html.LabelFor(model => model.Topic)
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.Topic, 5, 60, new { @id="inputTopic", onkeyup = "CharCount(this)", maxlength = 500 })
                            <p id="CharCount">500 characters left</p>
                        </div>
                        @Html.ValidationMessageFor(model => model.Topic)
                    </div>

                    <div class="SecondDiv" style="position: absolute; width: 500px; height:400px; left:500px;">
                        <h3 style="text-align: center; color:white; background:#ff4500; width:502px; margin-top:1px;">Please tag your post</h3>
                        <div class="divTagTablesMain">
                            <table id="tableAvailableTags" class="tableAvailableTags">
                                <thead>
                                    <tr class="trHeaderAvailableTagsTable">
                                        <td class="tdHeaderAvailableTagsLeft">@Html.TextBox("Header", null, new { @style = "width:100%; height:15px;", onkeyup = "filterResults(this.value)" })</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                    if (Model.TagIdAndNames != null)
                                    {
                                        foreach (KeyValuePair<int, string> kvp in Model.TagIdAndNames)
                                        {
                                <tr>
                                    <td class="nonClickedCells" onclick="selectTag(this)" id=@String.Concat("availableTag" + kvp.Key)>
                                        @kvp.Value
                                    </td>
                                    <td class="nonClickedCells" onclick=" selectTag(this)"><img class="imgAvailableTagIcons" src="@Model.TagIdAndImages[kvp.Key]" /></td>
                                </tr>
                                        }
                                    }
                                    }
                                </tbody>
                            </table>
                            <table id="tableSelectedTags" class="tableSelectedTags">
                                <thead>
                                    <tr><td><p>Selected Tags</p></td></tr>
                                </thead>
                                <tbody></tbody>
                            </table>

                            <input id="btnCreate" class="classSubmitButtons" type="submit" value="Create" onclick="setArgumentType(0)" style="width:100%; margin:0 auto; height:40px; font-size:20px; margin-top:14px;" />
                            <input id="btnCreateAgree" class="classSubmitButtons" type="submit" value="Agree and Create" onclick="setArgumentType(1)" style="width: 100%; margin: 0 auto; height: 40px; font-size: 20px; margin-top: 5px; background: #FF3200;" />
                            <input id="btnCreateDisagree" class="classSubmitButtons" type="submit" value="Disagree and Create" onclick="setArgumentType(2)" style="width: 100%; margin: 0 auto; height: 40px; font-size: 20px; margin-top: 5px; background: #8244D6;" />
                        </div>
                    </div>
                </div>


                <div id="divHiddenTags" style="visibility:hidden">0</div>

                @Html.HiddenFor(model => model.Tag1)
                @Html.HiddenFor(model => model.Tag2)
                @Html.HiddenFor(model => model.Tag3)
                @Html.HiddenFor(model => model.Tag4)
                @Html.HiddenFor(model => model.Tag5)

                @*<p style="position:relative">
                    <input type="button" value="Next" onclick="SingleTransitionVert(true)" />
                </p>*@

                    @*<p class="classSubmitButtons">Would you like to create an argument for either side?</p>*@
                    @Html.HiddenFor(model => model.ArgEntryType)
                    @*<div>
                        <input class="classSubmitButtons" type="submit" value="Agree and Create" onclick="setArgumentType(1)" />
                        <input class="classSubmitButtons" type="submit" value="Disagree and Create" onclick="setArgumentType(2)" />
                    </div>*@
                        @*<input class="classSubmitButtons" type="button" value="Back" onclick="SingleTransitionVert(false)" />*@
                       
            </div>

           

        </fieldset>
    }

</div>

<script type="text/javascript">
    window.onload = function () {
        document.getElementById("SubjectMatterId").selectedIndex = -1;
    }

    $(document).ready(function () {
        $('#inputTitle').qtip(
        {
            content: 'Title your Spark. Make it memorable!'
        });
        $('#inputCategory').qtip(
       {
           content: 'Please associate your Spark with a category so others with similar interests can find it.'
       });
        $('#inputTopic').qtip(
        {
            content: 'What is your topic for the Spark? Try to be as specific and to the point as possible.'
        });
        $('#tableAvailableTags').qtip(
        {
            content: 'Please choose three tags that are associated with your Spark. Doing so will help others find your post.'
        });
        $('#btnCreate').qtip(
        {
            content: 'Create your Spark without arguing for or against your topic.'
        });
        $('#btnCreateAgree').qtip(
        {
            content: 'Create your Spark and tell others why you agree.'
        });
        $('#btnCreateDisagree').qtip(
        {
            content: 'Create your Spark and tell others why you disagree.'
        });
    });
</script>